using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Dapper.DBContext.Helper;
using System.Collections;
using System.Dynamic;

namespace Dapper.DBContext.Dialect
{
    public class SqlBuilder : ISqlBuilder, IJoinQuery
    {
        private static readonly ConcurrentDictionary<string, string> _SqlCache = new ConcurrentDictionary<string, string>();
        IDataBaseDialect _dialect;
        IList<JoinArgument> _joinContainer;
        string _joinFormat = "{Table} {tableAlias} on {PreTableAlias}.{PreTableKey} = {tableAlias}.{TableKey}";
        string _pageSql = "";
        public SqlBuilder(IDataBaseDialect dialect)
        {
            this._dialect = dialect;
            this._pageSql = dialect.PageFormat;
        }
        #region ISqlBuilder Implement
        public string BuildInsert(Type modelType)
        {
            var sqlKey = GetModelSqlKey(modelType, Operator.Insert);
            if (_SqlCache.ContainsKey(sqlKey))
            {
                return _SqlCache[sqlKey];
            }
            string table = GetTable(modelType);
            var properties = ReflectionHelper.GetBuildSqlProperties(modelType);
            var values = string.Join(",", properties.Select(p => "@" + p));
            var columns = string.Join(",", properties.Select(p => string.Format(this._dialect.WrapFormat, p)));
            var sql = string.Format("insert into {0} ({1}) values ({2}) {3}", table, columns, values, this._dialect.IdentityFromat);
            _SqlCache[sqlKey] = sql;
            return sql;

        }

        public string BuildUpdate(Type modelType)
        {
            var sqlKey = GetModelSqlKey(modelType, Operator.Update);
            if (_SqlCache.ContainsKey(sqlKey))
            {
                return _SqlCache[sqlKey];
            }
            string table = GetTable(modelType);
            var updateProperties = ReflectionHelper.GetBuildSqlProperties(modelType);
            var updateFields = string.Join(",", updateProperties.Select(p => string.Format(this._dialect.WrapFormat, p) + " = @" + p));
            var whereFields = string.Empty;
            var rowVersion = "";
            if (ReflectionHelper.GetPropertyInfos(modelType).Exists(p => p.Name == "RowVersion" && p.PropertyType == typeof(byte[])))
            {
                rowVersion = string.Format("and [RowVersion]=@RowVersion");
            }
            whereFields = string.Format("where {0}=@{1} {2}", GetKey(modelType), ReflectionHelper.GetKeyName(modelType), rowVersion);
            var sql = string.Format("update {0} set {1} {2}", table, updateFields, whereFields);
            _SqlCache[sqlKey] = sql;
            return sql;
        }

        public string BuildDelete(Type modelType)
        {
            var sqlKey = GetModelSqlKey(modelType, Operator.Update);
            if (_SqlCache.ContainsKey(sqlKey))
            {
                return _SqlCache[sqlKey];
            }
            string table = GetTable(modelType);
            var rowVersion = "";
            if (ReflectionHelper.GetPropertyInfos(modelType).Exists(p => p.Name == "RowVersion" && p.PropertyType == typeof(byte[])))
            {
                rowVersion = string.Format("and [RowVersion]=@RowVersion");
            }
            var sql = string.Format("delete from {0} where {1}=@{2} {3}", table, GetKey(modelType), ReflectionHelper.GetKeyName(modelType), rowVersion);
            _SqlCache[sqlKey] = sql;
            return sql;
        }

        public string BuildWhere<TEntity>(System.Linq.Expressions.Expression<Func<TEntity, bool>> expression, out object arguments) where TEntity : IEntity
        {
            var queryArgments = LamdaHelper.GetWhere<TEntity>(expression);
            //  Dictionary<string, object> dic = new Dictionary<string, object>();
            dynamic args = new ExpandoObject();
            StringBuilder sql = new StringBuilder();
            sql.Append("where ");
            foreach (QueryArgument argument in queryArgments)
            {
                var columnName = argument.Name;
                var argumentName = argument.Name;
                if (argument.Name.Contains("$"))
                {
                    // eg: Id$1  // get rid of $   column name is Id ,argument name is Id1 
                    columnName = columnName.Substring(0, columnName.LastIndexOf("$"));
                    argumentName = argument.Name.Replace("$", "");
                }
                ((IDictionary<string, object>)args)[argumentName] = argument.Value;
                sql.AppendFormat("{0} {1} @{2} {3} ", getColumn(columnName), argument.Operator, argumentName, argument.Link);
            }
            arguments = args;

            return sql.ToString().Trim();
        }

        public string BuildSelect<TEntity>() where TEntity : IEntity
        {
            return BuildSelect<TEntity>("");
        }

        public string BuildSelect<TEntity>(string columns) where TEntity : IEntity
        {
            var modelType = typeof(TEntity);
            string table = GetTable(modelType);
            var properties = ReflectionHelper.GetSelectSqlProperties(modelType);
            if (string.IsNullOrEmpty(columns))
            {
                columns = string.Join(",", properties.Select(p => string.Format(this._dialect.WrapFormat, p)));
            }
            return string.Format("select {0} from {1} ", columns, table);
        }
        public string GetKeyName(Type modelType, bool isWrapDialect)
        {
            if (isWrapDialect)
            {
                return GetKey(modelType);
            }
            else
            {
                return ReflectionHelper.GetKeyName(modelType);
            }
        }

        public IJoinQuery BuildJoin<TEntity>()
        {
            var entityType = typeof(TEntity);
            var tableAlias = "t";
            string sql = "from {Table} {tableAlias}";
            sql = sql.Replace("{Table}", GetTable(entityType));
            sql = sql.Replace("{tableAlias}", tableAlias);      
            this._joinContainer.Add(new JoinArgument(entityType, tableAlias, sql));
            return this; 
        }
        public IJoinQuery BuildPage<TEntity>(int pageIndex, int pageSize)
        {
            var entityType = typeof(TEntity);
            var tableAlias = "t";
            // string sql = "{PageSql} from {Table} {tableAlias}";
            //sql = sql.Replace("{Table}", GetTable(entityType));
            //sql = sql.Replace("{tableAlias}", tableAlias);
            this._pageSql = this._pageSql.Replace("{TableName}", GetTable(entityType));
            _pageSql = _pageSql.Replace("{tableAlias}", tableAlias);
            _pageSql = _pageSql.Replace("{PageIndex}", pageIndex);
            _pageSql = _pageSql.Replace("{PageSize}", pageSize);
           // this._joinContainer.Add(new JoinArgument(entityType, tableAlias, sql));
            return this; 
        }

        #endregion

        #region IJoinQuery Implement

        public IList<JoinArgument> JoinContainer
        {
            get { return _joinContainer ?? new List<JoinArgument>(); }
        }
        public IJoinQuery InnerJoin<TEntity>()
        {
            var argment = BuildJoinArgument(typeof(TEntity));
            argment.Sql = "inner join " + argment.Sql;
            this._joinContainer.Add(argment);
            return this;
        }

        public IJoinQuery LeftJoin<TEntity>()
        {
            var argment = BuildJoinArgument(typeof(TEntity));
            argment.Sql = "left join " + argment.Sql;
            this._joinContainer.Add(argment);
            return this;
        }

        public IJoinQuery RightJoin<TEntity>()
        {
            var argment = BuildJoinArgument(typeof(TEntity));
            argment.Sql = "right join " + argment.Sql;
            this._joinContainer.Add(argment);
            return this;
        }

        public IEnumerator<TResult> Where<TEntity, TResult>(System.Linq.Expressions.Expression<Func<TEntity, bool>> expression)
        {
            throw new NotImplementedException();
        }

        public IEnumerator<TResult> Where<TEntity1, TEntity2, TResult>(System.Linq.Expressions.Expression<Func<TEntity1, TEntity2, bool>> expression)
        {
            throw new NotImplementedException();
        }

        public IEnumerator<TResult> Where<TEntity1, TEntity2, TEntity3, TResult>(System.Linq.Expressions.Expression<Func<TEntity1, TEntity2, TEntity3, bool>> expression)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region private method

        private string GetModelSqlKey(Type modelType, Operator operate)
        {
            return string.Format("{0}.{1}", modelType.Name, operate.ToString());
        }

        private string GetTable(Type modelType)
        {
            return string.Format(this._dialect.WrapFormat, ReflectionHelper.GetTableName(modelType));
        }

        private string GetKey(Type modelType)
        {
            return string.Format(this._dialect.WrapFormat, ReflectionHelper.GetKeyName(modelType));
        }

        private string getColumn(string name)
        {
            return string.Format(this._dialect.WrapFormat, name);
        }

        private JoinArgument BuildJoinArgument(Type entityType)
        {
            if (_joinContainer.Count == 0) throw new Exception("Join can not be used alone");
            var preEntity = this._joinContainer[_joinContainer.Count - 1];
            var tableAlias = "t" + _joinContainer.Count;
            string sql = _joinFormat.Replace("{Table}", GetTable(entityType));
            sql = _joinFormat.Replace("{tableAlias}", tableAlias);
            sql = _joinFormat.Replace("{PreTableAlias}", preEntity.TableAlias);
            sql = _joinFormat.Replace("{PreTableKey}", GetKeyName(preEntity.EntityType, true));
            sql = _joinFormat.Replace("{TableKey}", GetKeyName(entityType, true));
            return new JoinArgument(entityType, tableAlias, sql);
        }
        #endregion



    }
}
